---
import Layout from '../../layouts/Layout.astro';
import ProjectCard from '../../components/ProjectCard.astro';
import { getCollection } from 'astro:content';

const allProjects = await getCollection('projects');
const sortedProjects = allProjects.sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime());

// Obtener todos los tags únicos
const allTags = [...new Set(allProjects.flatMap(project => project.data.tags))];
---

<Layout title="Proyectos - Portfolio">
  <section class="py-20">
    <div class="container mx-auto px-4">
      <div class="text-center mb-16">
        <h1 class="text-5xl font-bold mb-6" style="color: var(--section-title);" data-i18n="projects.title">
          Mis Proyectos
        </h1>
        <p class="text-xl max-w-2xl mx-auto" style="color: var(--section-description);" data-i18n="projects.description">
          Una colección de proyectos que muestran mi experiencia y pasión por el desarrollo
        </p>
      </div>

      <!-- Filtros por tags -->
      <div class="mb-12">
        <div class="flex flex-wrap justify-center gap-3">
          <button 
            class="filter-btn active px-4 py-2 rounded-full font-medium transition-colors"
            style="background-color: var(--filter-active-bg); color: var(--filter-active-text);"
            data-tag="all"
            data-i18n="projects.all"
          >
            Todos
          </button>
          {allTags.map((tag) => (
            <button 
              class="filter-btn px-4 py-2 rounded-full font-medium transition-colors"
              style="background-color: var(--filter-bg); color: var(--filter-text);"
              onmouseover="this.style.backgroundColor='var(--filter-hover-bg)'; this.style.color='var(--filter-hover-text)'"
              onmouseout="if(!this.classList.contains('active')) { this.style.backgroundColor='var(--filter-bg)'; this.style.color='var(--filter-text)' }"
              data-tag={tag}
            >
              {tag}
            </button>
          ))}
        </div>
      </div>

      <!-- Grid de proyectos -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8" id="projects-grid">
        {sortedProjects.map((project) => (
          <div class="project-item" data-tags={project.data.tags.join(',')}>
            <ProjectCard 
              title={project.data.title}
              description={project.data.description}
              image={project.data.image}
              tags={project.data.tags}
              slug={project.slug}
            />
          </div>
        ))}
      </div>

      {sortedProjects.length === 0 && (
        <div class="text-center py-12">
          <p class="text-lg" style="color: var(--section-description);" data-i18n="projects.noProjects">
            No hay proyectos disponibles en este momento.
          </p>
        </div>
      )}
    </div>
  </section>
</Layout>

<script>
  // Filtrado por tags
  const filterButtons = document.querySelectorAll('.filter-btn');
  const projectItems = document.querySelectorAll('.project-item');

  filterButtons.forEach(button => {
    button.addEventListener('click', () => {
      const selectedTag = button.dataset.tag;
      
      // Actualizar botones activos
      filterButtons.forEach(btn => {
        btn.classList.remove('active');
        btn.style.backgroundColor = 'var(--filter-bg)';
        btn.style.color = 'var(--filter-text)';
      });
      
      button.classList.add('active');
      button.style.backgroundColor = 'var(--filter-active-bg)';
      button.style.color = 'var(--filter-active-text)';
      
      // Filtrar proyectos
      projectItems.forEach(item => {
        if (selectedTag === 'all' || item.dataset.tags.includes(selectedTag)) {
          item.style.display = 'block';
        } else {
          item.style.display = 'none';
        }
      });
    });
  });
</script>
